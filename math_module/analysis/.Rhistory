scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
get_variables(divman01.rich.model.full)
divman01.rich.model.full %>%
gather_draws(par=c(bs_saridity_mean,bs_selevation_range_m,bs_slat_range, bs_sprecip_seasonality_mean)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
get_variables(divman01.rich.model.full) %>% head
get_variables(divman01.rich.model.full) %>% head(20)
get_variables(divman01.rich.model.full)
divman01.rich.model.full %>%
gather_draws(par=c(bs_saridity_mean_1,bs_selevation_range_m_1,bs_slat_range_1, bs_sprecip_seasonality_mean_1)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
divman01.rich.model.full %>%
gather_draws(par=c(sds_saridity_mean_1,sds_selevation_range_m_1,sds_slat_range_1, sds_sprecip_seasonality_mean_1)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
# plotting - estimates and posteriors
# effects
conditional_effects(divman01.rich.model.full)[[1]] %>%
ggplot(aes(x=log(species_overlap_all_count), y=estimate__)) +
geom_line() +
xlab("Log species overlap") + ylab("VIP family richness") +
geom_ribbon(aes(ymax=upper__, ymin=lower__), alpha=.3)
# regression tables
mcmcTab(divman01.rich.model.full, Pr = TRUE)
mcmcReg(divman01.rich.model.full, pars=c('b_.*','bs_.*', 'sds_.*'),regex=TRUE)
divman01.rich.model.full %>% spread_draws(mu[i])
divman01.rich.model.full
divman01.rich.model.full %>% spread_draws(mu)
get_variables(divman01.rich.model.full)
divman01.rich.model.full %>% gather_draws(s_sspecies_overlap_by_order_count_1[i]) %>% mean_qi()
get_variables(divman01.rich.model.full) %>% head
datplot<-divman01.rich.model.full %>% gather_draws(s_sspecies_overlap_by_order_count_1[i]) %>% mean_qi()
dataplot$overlap<-data$species_overlap_by_order_count
datplot$overlap<-data$species_overlap_by_order_count
datplot
plot(divman01.rich.model.full)
library(ggplot2)
library(tidyverse)
decodeMap<-read.table("/home/lauterbur/Documents/dl_sweeps/tests/sex-averaged-decode.rmap",
header = TRUE)
decodeMap
testMap<-read.table("/home/lauterbur/Documents/dl_sweeps/tests/recombp05_neutral.map",
header=TRUE)
testMap
# percent of "hotspots" (>1cM/Mb)?
mean(decodeMap$stdrate) # avg rate, 0.96 (should be ~1)
median(decodeMap$stdrate) # 0.011
mean(decodeMap$stdrate[which(decodeMap$stdrate<mean(decodeMap$stdrate))]) # avg baseline, 0.13
mean(decodeMap$stdrate[which(decodeMap$stdrate>mean(decodeMap$stdrate))]) # avg hotspot, 3.9
median(decodeMap$stdrate[which(decodeMap$stdrate>mean(decodeMap$stdrate))]) # avg hotspot, 2.4
sum(decodeMap$stdrate>mean(decodeMap$stdrate))/length(decodeMap$stdrate)*100 # percent hotspots, 22
mean(testMap$rate.cM.Mb.) # 1.3
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<mean(testMap$rate.cM.Mb.))]) # 0.006
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<mean(testMap$rate.cM.Mb.))]) # 0.006
median(testMap$rate.cM.Mb.) # 0.0057, 0.0116
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 21
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 11
sum(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))/length(testMap$rate.cM.Mb.)*100 # 6.5
# original p05, new p05 (RHONEW =~ 0.1)
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<10)]) # avg baseline, 0.18
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>10)]) # avg hotspot, 34
# original p05, new p05 (RHONEW =~ 0.1)
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<1)]) # avg baseline, 0.18, 0.13
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 34
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 31
sum(testMap$rate.cM.Mb.>1)/length(testMap$rate.cM.Mb.)*100 # percent hotspots, 3.5
decodeMap %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap) +
# geom_density(aes(rate), color="blue", data=distMap1) +
theme_bw() +
xlim(0,20)
decodeMap %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap) +
# geom_density(aes(rate), color="blue", data=distMap1) +
theme_bw()
decodeMap %>%
filter(
stdrate>10) %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap %>% filter(rate.cM.Mb.>1)) +
# geom_density(aes(rate), color="blue", data=distMap1 %>% filter(rate>10)) +
theme_bw()
decodeMap %>%
filter(
stdrate>10) %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.*10), color="red", data=testMap %>% filter(rate.cM.Mb.>1)) +
# geom_density(aes(rate), color="blue", data=distMap1 %>% filter(rate>10)) +
theme_bw()
testMap<-read.table("/home/lauterbur/Documents/dl_sweeps/tests/recombp015_neutral.map",
header=TRUE)
testMap
# original p05, new p05 (RHONEW =~ 0.1), new p015 (RHONEW =~0.1)
mean(testMap$rate.cM.Mb.) # 1.3, 0.13
median(testMap$rate.cM.Mb.) # 0.0057, 0.00038
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<mean(testMap$rate.cM.Mb.))]) # 0.006, 0.0116
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 21, 0.89
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 11, 0.43
sum(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))/length(testMap$rate.cM.Mb.)*100 # 6.5, 13
# original p05, new p05 (RHONEW =~ 0.1), new p015 (RHONEW =~0.1)
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<1)]) # avg baseline, 0.18, 0.04
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 34, 1.7
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 31, 1.7
sum(testMap$rate.cM.Mb.>1)/length(testMap$rate.cM.Mb.)*100 # percent hotspots, 3.5, 5.5
decodeMap %>%
filter(
stdrate>10) %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.*10), color="red", data=testMap %>% filter(rate.cM.Mb.>1)) +
# geom_density(aes(rate), color="blue", data=distMap1 %>% filter(rate>10)) +
theme_bw()
decodeMap %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap) +
# geom_density(aes(rate), color="blue", data=distMap1) +
theme_bw()
shiny::runApp('Desktop/AAUW_2022/math_module/data_collection')
runApp('Desktop/AAUW_2022/math_module/data_collection')
runApp('Desktop/AAUW_2022/math_module/data_collection')
help(if)
??if
runApp('Desktop/AAUW_2022/math_module/data_collection')
shiny::runApp('Desktop/AAUW_2022/math_module/analysis/app')
library(shiny)
library(plyr)
library(googlesheets4)
library(ggplot2)
library(tidyverse)
library(scales)
library(forcats)
# setwd("/home/lauterbur/Desktop/AAUW_2022/math_module/analysis")
# options(gargle_oauth_cache = ".secrets")
# gs4_auth()
# list.files(".secrets/")
# gs4_deauth()
gs4_auth(cache = ".secrets", email = "elise.lauterbur@gmail.com")
dataURL <- "https://docs.google.com/spreadsheets/d/1Jxy-6f-RbHFttzZ2ZJsPUYe6Nj3rIWz3bF-tb5AzHLY/edit?usp=sharing"
data
data <- read_sheet(dataURL)
data_long <- data %>%
select(c(2:16)) %>%
rename_at(vars(everything()),
~c("totalHouses",
"totalTiny",
"tinyWC",
"tinyGarden",
"tinyEnergy",
"totalRow",
"rowWC",
"rowGarden",
"rowEnergy",
"totalFree",
"freeWC",
"freeGarden",
"freeEnergy",
"totalCost",
"totalPeople")) %>%
rowwise() %>%
dplyr::mutate(totalHouses=sum(totalTiny,totalRow,totalFree),
totalPeople=sum(totalTiny*1,totalRow*3,totalFree*5)) %>%
ungroup() %>%
dplyr::mutate(id=1:n()) %>%
# pivot_longer(cols=c(starts_with("tiny"),starts_with("row"),starts_with("free")),
#              names_to=c(".value","amenity"),
#              names_pattern="(^[a-z]+)(.*)")
pivot_longer(cols=c(starts_with("tiny"),starts_with("row"),starts_with("free")),
names_to="amenity",
values_to="number_amenity") %>%
pivot_longer(cols=c("totalTiny","totalRow","totalFree"),
names_to="type",
values_to="number_house") %>%
mutate(type=tolower(str_remove(type,"total"))) %>%
rowwise() %>%
filter(grepl(type,amenity)) %>%
mutate(amenity=tolower(str_remove(amenity,"tiny|free|row"))) %>%
group_by(id)
data_long %>%
distinct(totalHouses,totalCost,totalPeople,type,number_house) %>%
mutate(peoplePerHouse=ifelse(type=="tiny",1*number_house,
ifelse(type=="row",3*number_house,
ifelse(type=="free",5*number_house,
NA)))) %>%
group_by(type) %>%
ggplot(aes(totalPeople, weights=peoplePerHouse)) +
geom_histogram(binwidth=2,aes(fill=type)) +
scale_x_continuous(breaks=pretty_breaks()) +
xlab("Total number of people housed") +
theme_bw() +
labs(title="Number of people housed by house type")
data_long %>%
distinct(totalHouses,totalCost,totalPeople,type,number_house) %>%
group_by(type) %>%
ggplot(aes(totalPeople, weights=number_house)) +
geom_histogram(binwidth=2,aes(fill=type)) +
scale_x_continuous(breaks=pretty_breaks()) +
xlab("Total number of houses built") +
theme_bw() +
labs(title="Number of houses built by house type")
ggplot(data_long, aes(x=totalCost, y=totalPeople)) +
geom_point() +
theme_bw() +
xlab("Total cost ($)") +
ylab("Total number of people housed") +
labs(title="Effect of total cost on number of people housed")
data_summary(data_long,varname="number_house",groupnames=c("amenity","type")) %>%
ggplot() + aes(x=fct_rev(amenity), y=number_house, fill=fct_rev(type)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=number_house-sd, ymax=number_house+sd),
width=.2,
position=position_dodge(0.9)) +
theme_bw() +
labs(title="Average number of houses built with each enhancement",
fill="House type") +
xlab("Enhancement") +
ylab("Number of houses") +
scale_fill_hue(labels=c("Tiny", "Row", "Free-standing")) +
theme_bw()
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
data_summary(data_long,varname="number_house",groupnames=c("amenity","type")) %>%
ggplot() + aes(x=fct_rev(amenity), y=number_house, fill=fct_rev(type)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=number_house-sd, ymax=number_house+sd),
width=.2,
position=position_dodge(0.9)) +
theme_bw() +
labs(title="Average number of houses built with each enhancement",
fill="House type") +
xlab("Enhancement") +
ylab("Number of houses") +
scale_fill_hue(labels=c("Tiny", "Row", "Free-standing")) +
theme_bw()
data_long
data_summary(data_long,varname="number_house",groupnames=c("amenity","type"))
varname="number_house"
groupnames=c("amenity","type")
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
ddply(data, groupnames, .fun=summary_func,
varname)
ddply(data_long, groupnames, .fun=summary_func,
varname)
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum<-ddply(data_long, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
data_sum
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
# data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
data_summary(data_long,varname="number_house",groupnames=c("amenity","type"))
data_summary(data_long,varname="number_house",groupnames=c("amenity","type")) %>%
ggplot() + aes(x=fct_rev(amenity), y=number_house, fill=fct_rev(type)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=number_house-sd, ymax=number_house+sd),
width=.2,
position=position_dodge(0.9)) +
theme_bw() +
labs(title="Average number of houses built with each enhancement",
fill="House type") +
xlab("Enhancement") +
ylab("Number of houses") +
scale_fill_hue(labels=c("Tiny", "Row", "Free-standing")) +
theme_bw()
data_summary(data_long,varname="number_house",groupnames=c("amenity","type"))
data_sum <- rename(data_sum, c("mean" = paste(varname)))
help(rename)
library(shiny)
library(googlesheets4)
library(ggplot2)
library(tidyverse)
library(scales)
library(forcats)
# setwd("/home/lauterbur/Desktop/AAUW_2022/math_module/analysis")
# options(gargle_oauth_cache = ".secrets")
# gs4_auth()
# list.files(".secrets/")
# gs4_deauth()
gs4_auth(cache = ".secrets", email = "elise.lauterbur@gmail.com")
dataURL <- "https://docs.google.com/spreadsheets/d/1Jxy-6f-RbHFttzZ2ZJsPUYe6Nj3rIWz3bF-tb5AzHLY/edit?usp=sharing"
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = paste(varname)))
return(data_sum)
}
data <- read_sheet(dataURL)
data <- read_sheet(dataURL)
# setwd("/home/lauterbur/Desktop/AAUW_2022/math_module/analysis")
# options(gargle_oauth_cache = ".secrets")
# gs4_auth()
# list.files(".secrets/")
# gs4_deauth()
gs4_auth(cache = ".secrets", email = "elise.lauterbur@gmail.com")
dataURL <- "https://docs.google.com/spreadsheets/d/1Jxy-6f-RbHFttzZ2ZJsPUYe6Nj3rIWz3bF-tb5AzHLY/edit?usp=sharing"
data <- read_sheet(dataURL)
setwd("/home/lauterbur/Desktop/AAUW_2022/math_module/analysis")
options(gargle_oauth_cache = ".secrets")
gs4_auth()
# setwd("/home/lauterbur/Desktop/AAUW_2022/math_module/analysis")
# options(gargle_oauth_cache = ".secrets")
# gs4_auth()
# list.files(".secrets/")
# gs4_deauth()
gs4_auth(cache = ".secrets", email = "elise.lauterbur@gmail.com")
dataURL <- "https://docs.google.com/spreadsheets/d/1Jxy-6f-RbHFttzZ2ZJsPUYe6Nj3rIWz3bF-tb5AzHLY/edit?usp=sharing"
data <- read_sheet(dataURL)
data_long <- data %>%
select(c(2:16)) %>%
rename_at(vars(everything()),
~c("totalHouses",
"totalTiny",
"tinyWC",
"tinyGarden",
"tinyEnergy",
"totalRow",
"rowWC",
"rowGarden",
"rowEnergy",
"totalFree",
"freeWC",
"freeGarden",
"freeEnergy",
"totalCost",
"totalPeople")) %>%
rowwise() %>%
dplyr::mutate(totalHouses=sum(totalTiny,totalRow,totalFree),
totalPeople=sum(totalTiny*1,totalRow*3,totalFree*5)) %>%
ungroup() %>%
dplyr::mutate(id=1:n()) %>%
# pivot_longer(cols=c(starts_with("tiny"),starts_with("row"),starts_with("free")),
#              names_to=c(".value","amenity"),
#              names_pattern="(^[a-z]+)(.*)")
pivot_longer(cols=c(starts_with("tiny"),starts_with("row"),starts_with("free")),
names_to="amenity",
values_to="number_amenity") %>%
pivot_longer(cols=c("totalTiny","totalRow","totalFree"),
names_to="type",
values_to="number_house") %>%
mutate(type=tolower(str_remove(type,"total"))) %>%
rowwise() %>%
filter(grepl(type,amenity)) %>%
mutate(amenity=tolower(str_remove(amenity,"tiny|free|row"))) %>%
group_by(id)
data_long %>%
distinct(totalHouses,totalCost,totalPeople,type,number_house) %>%
mutate(peoplePerHouse=ifelse(type=="tiny",1*number_house,
ifelse(type=="row",3*number_house,
ifelse(type=="free",5*number_house,
NA)))) %>%
group_by(type) %>%
ggplot(aes(totalPeople, weights=peoplePerHouse)) +
geom_histogram(binwidth=2,aes(fill=type)) +
scale_x_continuous(breaks=pretty_breaks()) +
xlab("Total number of people housed") +
theme_bw() +
labs(title="Number of people housed by house type")
data_long %>%
distinct(totalHouses,totalCost,totalPeople,type,number_house) %>%
group_by(type) %>%
ggplot(aes(totalPeople, weights=number_house)) +
geom_histogram(binwidth=2,aes(fill=type)) +
scale_x_continuous(breaks=pretty_breaks()) +
xlab("Total number of houses built") +
theme_bw() +
labs(title="Number of houses built by house type")
ggplot(data_long, aes(x=totalCost, y=totalPeople)) +
geom_point() +
theme_bw() +
xlab("Total cost ($)") +
ylab("Total number of people housed") +
labs(title="Effect of total cost on number of people housed")
data_summary(data_long,varname="number_house",groupnames=c("amenity","type")) %>%
ggplot() + aes(x=fct_rev(amenity), y=number_house, fill=fct_rev(type)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=number_house-sd, ymax=number_house+sd),
width=.2,
position=position_dodge(0.9)) +
theme_bw() +
labs(title="Average number of houses built with each enhancement",
fill="House type") +
xlab("Enhancement") +
ylab("Number of houses") +
scale_fill_hue(labels=c("Tiny", "Row", "Free-standing")) +
theme_bw()
data_long %>%
select(-c(totalHouses, totalCost)) %>%
pivot_wider(names_from=c(amenity),
values_from=number_amenity) %>%
#pivot_wider(names_from=type,
#           values_from=number_house) %>%
group_by(id, totalPeople, type) %>%
mutate(count_amenity=rowSums(.[c("wc","garden","energy")]!=0)) %>%
mutate(count_amenity=as.factor(count_amenity)) %>%
ungroup() %>%
group_by(count_amenity) %>%
dplyr::summarise(mean=mean(totalPeople),sd=sd(totalPeople)) %>%
ggplot(aes(x=count_amenity, y=mean)) +
geom_bar(stat="identity",aes(fill=count_amenity)) +
geom_errorbar(aes(ymin=mean-sd,ymax=mean+sd),
width=.2) +
theme_bw() +
xlab("Number of enhancements used in houses") +
ylab("Number of people housed") +
labs(title="Effect of number of enhancements on number of people housed")
data_long %>%
group_by(type,amenity) %>%
dplyr::summarise(sum=sum(number_amenity)) %>%
ggplot() + aes(x=fct_rev(type),y=sum,fill=fct_rev(amenity)) +
geom_bar(stat="identity") +
theme_bw() +
xlab("Type of house") +
ylab("Number of houses") +
labs(title="Total numbers of each type of house with each enhancement",
fill="amenity") +
scale_fill_hue(labels=c("wheelchair","garden","energy efficient"))
data_summary(data_long,varname="number_house",groupnames=c("amenity","type")) %>%
ggplot() + aes(x=fct_rev(amenity), y=number_house, fill=fct_rev(type)) +
geom_bar(stat="identity", position=position_dodge()) +
geom_errorbar(aes(ymin=number_house-sd, ymax=number_house+sd),
width=.2,
position=position_dodge(0.9)) +
theme_bw() +
labs(title="Average number of houses built with each enhancement",
fill="House type") +
xlab("Enhancement") +
ylab("Number of houses") +
scale_fill_hue(labels=c("Tiny", "Row", "Free-standing")) +
theme_bw()
