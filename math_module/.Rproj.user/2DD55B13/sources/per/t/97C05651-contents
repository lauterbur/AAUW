#

library(shiny)
library(googlesheets4)
library(ggplot2)
library(tidyverse)
library(scales)
library(forcats)

dataURL <- "https://docs.google.com/spreadsheets/d/1JnI3Op5Dp6Hs5SFHMxK_pl7qFO1vL2d9nFg5rjO5HEk/edit?usp=sharing"

# Define UI for application that draws a histogram
ui <- fixedPage(
    tags$style(type = "text/css", ".irs-grid-pol.small {height: 0px;}"),
    
    tabsetPanel(type = "tabs",
                tabPanel("Costs, Houses, People",
                
                    # Application title
                        titlePanel("Data analysis for house building project"),
                    
                        fixedRow(
                            column(6,
                                   plotOutput("peoplePlot")
                            ),
                            column(6,
                                   plotOutput("housePlot")
                            )
                        ),
                        fixedRow(
                            radioButtons("houseGroup", "Group by house type?",
                                         c("No" = "no",
                                           "Yes" = "yes")
                                        ),
                            plotOutput("costPeople")
                        )
                    ),
                
                tabPanel("Breakdown by amenities",
                         fixedRow(
                             plotOutput("amenityEffect")
                         ),
                         fixedRow(
                             column(6,
                                    plotOutput("avgAmenity")
                                    ),
                             column(6,
                                    plotOutput("amenityCompare")
                                    )
                         )
                    )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {
    options(scipen = 999) 
    
    data <- read_sheet(dataURL)
    data_long <- data %>%
        rename(totalHouses="How many houses were you able to renovate?",
               totalPeople="How many people were you able to help?",
               totalTiny="How many tiny houses did you build?",
               totalRow="How many row houses did you build?",
               totalFree="How many free-standing houses did you build?",
               tinyWC="How many of the tiny houses are wheelchair accessible?",
               tinyGarden="How many of the tiny houses have a garden?",
               tinyEnergy="How many of the tiny houses are optimized for energy efficiency?",
               rowWC="How many of the row houses are wheelchair accessible?",
               rowGarden="How many of the row houses have a garden?",
               rowEnergy="How many of the row houses are optimized for energy efficiency?",
               freeWC="How many of the free-standing houses are wheelchair accessible?",
               freeGarden="How many of the row houses have a garden?",
               freeEnergy="How many of the free-standing houses are optimized for energy efficiency?",
               totalCost="How much money did you spend?") %>%
        select(c(starts_with("total"),starts_with("tiny"),starts_with("row"),starts_with("free"))) %>%
        mutate(id=1:n()) %>%
        pivot_longer(cols=c(starts_with("tiny"),starts_with("row"),starts_with("free")),
                     names_to="amenity",
                     values_to="number_amenity") %>%
        pivot_longer(cols=c("totalTiny","totalRow","totalFree"),
                     names_to="type",
                     values_to="number_house") %>%
        mutate(type=tolower(str_remove(type,"total"))) %>%
        rowwise() %>% 
        filter(grepl(type,amenity)) %>% 
        mutate(amenity=tolower(str_remove(amenity,"tiny|free|row"))) %>%
        group_by(id)
    
    # make plots
    output$peoplePlot <- renderPlot({ # DOUBLE CHECK THAT THIS OUTPUT MAKES SENSE BECAUSE OF LONG FORMAT
        ggplot(data_long, aes(totalPeople, color=type, fill=type), group=id) +
            geom_histogram(binwidth=2) +
            scale_x_continuous(breaks=pretty_breaks()) +
            xlab("Total number of people housed") +
            theme_bw() +
            labs(title="Number of people housed by house type")
    })
    
    output$housePlot <- renderPlot({ # DOUBLE CHECK THAT THIS OUTPUT MAKES SENSE BECAUSE OF LONG FORMAT
        ggplot(data_long, aes(totalHouses, color=type, fill=type), group=id) +
            geom_histogram(binwidth=2) +
            scale_x_continuous(breaks=pretty_breaks()) +
            xlab("Total number of houses built") +
            theme_bw() +
            labs(title="Number of houses built by house type")
    })
    
    output$costPeople <- renderPlot({
        switch(input$houseGroup,
               "no"= ggplot(data_long, aes(x=totalCost, y=totalPeople)) +
                        geom_point() +
                        theme_bw() +
                        xlab("Total cost ($)") +
                        ylab("Total number of people housed") +
                        labs(title="Effect of total cost on number of people housed"),
                "yes"= data_long %>%
                        select(-c(totalHouses)) %>%
                        pivot_wider(names_from=c(amenity),
                                    values_from=number_amenity) %>%
                        group_by(id, totalCost, totalPeople, type) %>%
                        summarise(n=n()) %>%
                        summarise(count_amenity=sum(n)) %>%
                        ggplot() +
                        aes(x=totalCost, y=totalPeople) +
                        geom_point(aes(color=factor(count_amenity))) +
                        theme_bw() +
                        xlab("Total cost ($)") +
                        ylab("Total number of people housed") +
                        labs(title="Effect of total cost on number of people housed, by amenity",
                             color="Number of amenities\nprovided across all houses")
              )
    })
    
    output$avgAmenity <- renderPlot({
        ggplot(data_long, aes(x=fct_rev(amenity), y=number_house)) +
            geom_boxplot(aes(fill=type)) +
            theme_bw()
    })

    output$amenityEffect <- renderPlot({
        data_long %>%
            select(-c(totalHouses, totalCost)) %>%
            pivot_wider(names_from=c(amenity),
                        values_from=number_amenity) %>%
            #pivot_wider(names_from=type,
             #           values_from=number_house) %>%
            group_by(id, totalPeople, type) %>%
            summarise(n=n()) %>%
            summarise(count_amenity=sum(n)) %>%
            ggplot(aes(x=factor(count_amenity), y=totalPeople)) +
            geom_boxplot() +
            theme_bw() +
            xlab("Number of amenities used in houses") +
            ylab("Number of people helped") +
            labs(title="Number of people housed by number of amenities provided across all houses")
        # total people helped with and without amenities
    })
    output$amenityCompare <- renderPlot({
        ggplot(data_long, aes(x=fct_rev(type), y=number_amenity)) +
            geom_boxplot(aes(fill=fct_rev(amenity))) +
            theme_bw() +
            ylab("Number of houses with amenity") +
            xlab("House type") +
            labs(title="Number of each type of house with each amenity",
                 fill="amenity") +
            scale_fill_hue(labels=c("wheelchair","garden","energy efficient"))
        # most amenities by house type
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
